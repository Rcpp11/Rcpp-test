// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// as_int
int as_int(SEXP x);
extern "C" SEXP RcppTest_as_int(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        int __result = as_int(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// as_double
double as_double(SEXP x);
extern "C"  SEXP RcppTest_as_double(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        double __result = as_double(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// as_raw
Rbyte as_raw(SEXP x);
extern "C"  SEXP RcppTest_as_raw(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Rbyte __result = as_raw(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// as_bool
bool as_bool(SEXP x);
extern "C"  SEXP RcppTest_as_bool(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        bool __result = as_bool(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// as_string
std::string as_string(SEXP x);
extern "C"  SEXP RcppTest_as_string(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        std::string __result = as_string(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// as_vector_int
std::vector<int> as_vector_int(SEXP x);
extern "C"  SEXP RcppTest_as_vector_int(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        std::vector<int> __result = as_vector_int(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// as_vector_double
std::vector<double> as_vector_double(SEXP x);
extern "C"  SEXP RcppTest_as_vector_double(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        std::vector<double> __result = as_vector_double(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// as_vector_raw
std::vector<Rbyte> as_vector_raw(SEXP x);
extern "C"  SEXP RcppTest_as_vector_raw(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        std::vector<Rbyte> __result = as_vector_raw(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// as_vector_bool
std::vector<bool> as_vector_bool(SEXP x);
extern "C"  SEXP RcppTest_as_vector_bool(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        std::vector<bool> __result = as_vector_bool(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// as_vector_string
std::vector<std::string> as_vector_string(SEXP x);
extern "C"  SEXP RcppTest_as_vector_string(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        std::vector<std::string> __result = as_vector_string(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// as_deque_int
std::deque<int> as_deque_int(SEXP x);
extern "C"  SEXP RcppTest_as_deque_int(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        std::deque<int> __result = as_deque_int(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// as_list_int
std::list<int> as_list_int(SEXP x);
extern "C"  SEXP RcppTest_as_list_int(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        std::list<int> __result = as_list_int(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// FromSEXP
DataFrame FromSEXP(SEXP x);
extern "C"  SEXP RcppTest_FromSEXP(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        DataFrame __result = FromSEXP(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// index_byName
SEXP index_byName(DataFrame df, std::string s);
extern "C"  SEXP RcppTest_index_byName(SEXP dfSEXP, SEXP sSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP );
        Rcpp::traits::input_parameter< std::string >::type s(sSEXP );
        SEXP __result = index_byName(df, s);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// index_byPosition
SEXP index_byPosition(DataFrame df, int i);
extern "C"  SEXP RcppTest_index_byPosition(SEXP dfSEXP, SEXP iSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP );
        Rcpp::traits::input_parameter< int >::type i(iSEXP );
        SEXP __result = index_byPosition(df, i);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// string_element
std::string string_element(DataFrame df);
extern "C"  SEXP RcppTest_string_element(SEXP dfSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP );
        std::string __result = string_element(df);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// createOne
DataFrame createOne();
extern "C"  SEXP RcppTest_createOne() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        DataFrame __result = createOne();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// createTwo
DataFrame createTwo();
extern "C"  SEXP RcppTest_createTwo() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        DataFrame __result = createTwo();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// SlotProxy
DataFrame SlotProxy(S4 o, std::string yy);
extern "C"  SEXP RcppTest_SlotProxy(SEXP oSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< S4 >::type o(oSEXP );
        Rcpp::traits::input_parameter< std::string >::type yy(yySEXP );
        DataFrame __result = SlotProxy(o, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// AttributeProxy
DataFrame AttributeProxy(List o, std::string y);
extern "C"  SEXP RcppTest_AttributeProxy(SEXP oSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type o(oSEXP );
        Rcpp::traits::input_parameter< std::string >::type y(ySEXP );
        DataFrame __result = AttributeProxy(o, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// createTwoStringsAsFactors
DataFrame createTwoStringsAsFactors();
extern "C"  SEXP RcppTest_createTwoStringsAsFactors() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        DataFrame __result = createTwoStringsAsFactors();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// DataFrame_nrows
int DataFrame_nrows(DataFrame df);
extern "C"  SEXP RcppTest_DataFrame_nrows(SEXP dfSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP );
        int __result = DataFrame_nrows(df);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_ls
SEXP runit_ls(Environment env);
extern "C"  SEXP RcppTest_runit_ls(SEXP envSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Environment >::type env(envSEXP );
        SEXP __result = runit_ls(env);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_ls2
SEXP runit_ls2(Rcpp::Environment env);
extern "C"  SEXP RcppTest_runit_ls2(SEXP envSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::Environment >::type env(envSEXP );
        SEXP __result = runit_ls2(env);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_get
SEXP runit_get(Environment env, std::string name);
extern "C"  SEXP RcppTest_runit_get(SEXP envSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Environment >::type env(envSEXP );
        Rcpp::traits::input_parameter< std::string >::type name(nameSEXP );
        SEXP __result = runit_get(env, name);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_exists
bool runit_exists(Environment env, std::string st);
extern "C"  SEXP RcppTest_runit_exists(SEXP envSEXP, SEXP stSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Environment >::type env(envSEXP );
        Rcpp::traits::input_parameter< std::string >::type st(stSEXP );
        bool __result = runit_exists(env, st);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_assign
bool runit_assign(Environment env, std::string st, SEXP object);
extern "C"  SEXP RcppTest_runit_assign(SEXP envSEXP, SEXP stSEXP, SEXP objectSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Environment >::type env(envSEXP );
        Rcpp::traits::input_parameter< std::string >::type st(stSEXP );
        Rcpp::traits::input_parameter< SEXP >::type object(objectSEXP );
        bool __result = runit_assign(env, st, object);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_islocked
void runit_islocked(Environment env);
extern "C"  SEXP RcppTest_runit_islocked(SEXP envSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Environment >::type env(envSEXP );
        runit_islocked(env);
    }
    return R_NilValue;
END_RCPP
}
// runit_bindingIsActive
bool runit_bindingIsActive(Environment env, std::string st);
extern "C"  SEXP RcppTest_runit_bindingIsActive(SEXP envSEXP, SEXP stSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Environment >::type env(envSEXP );
        Rcpp::traits::input_parameter< std::string >::type st(stSEXP );
        bool __result = runit_bindingIsActive(env, st);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_bindingIsLocked
bool runit_bindingIsLocked(Environment env, std::string st);
extern "C"  SEXP RcppTest_runit_bindingIsLocked(SEXP envSEXP, SEXP stSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Environment >::type env(envSEXP );
        Rcpp::traits::input_parameter< std::string >::type st(stSEXP );
        bool __result = runit_bindingIsLocked(env, st);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_notanenv
void runit_notanenv(SEXP x);
extern "C"  SEXP RcppTest_runit_notanenv(SEXP xSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        runit_notanenv(x);
    }
    return R_NilValue;
END_RCPP
}
// runit_lockbinding
void runit_lockbinding(Environment env, std::string st);
extern "C"  SEXP RcppTest_runit_lockbinding(SEXP envSEXP, SEXP stSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Environment >::type env(envSEXP );
        Rcpp::traits::input_parameter< std::string >::type st(stSEXP );
        runit_lockbinding(env, st);
    }
    return R_NilValue;
END_RCPP
}
// runit_unlockbinding
void runit_unlockbinding(Environment env, std::string st);
extern "C"  SEXP RcppTest_runit_unlockbinding(SEXP envSEXP, SEXP stSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Environment >::type env(envSEXP );
        Rcpp::traits::input_parameter< std::string >::type st(stSEXP );
        runit_unlockbinding(env, st);
    }
    return R_NilValue;
END_RCPP
}
// runit_globenv
Environment runit_globenv();
extern "C"  SEXP RcppTest_runit_globenv() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Environment __result = runit_globenv();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_emptyenv
Environment runit_emptyenv();
extern "C"  SEXP RcppTest_runit_emptyenv() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Environment __result = runit_emptyenv();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_baseenv
Environment runit_baseenv();
extern "C"  SEXP RcppTest_runit_baseenv() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Environment __result = runit_baseenv();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_namespace
Environment runit_namespace(std::string st);
extern "C"  SEXP RcppTest_runit_namespace(SEXP stSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type st(stSEXP );
        Environment __result = runit_namespace(st);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_env_SEXP
Environment runit_env_SEXP(SEXP env);
extern "C"  SEXP RcppTest_runit_env_SEXP(SEXP envSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type env(envSEXP );
        Environment __result = runit_env_SEXP(env);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_env_string
Environment runit_env_string(std::string st);
extern "C"  SEXP RcppTest_runit_env_string(SEXP stSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type st(stSEXP );
        Environment __result = runit_env_string(st);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_env_int
Environment runit_env_int(int pos);
extern "C"  SEXP RcppTest_runit_env_int(SEXP posSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type pos(posSEXP );
        Environment __result = runit_env_int(pos);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_parent
Environment runit_parent(Environment env);
extern "C"  SEXP RcppTest_runit_parent(SEXP envSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Environment >::type env(envSEXP );
        Environment __result = runit_parent(env);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_remove
bool runit_remove(Environment env, std::string name);
extern "C"  SEXP RcppTest_runit_remove(SEXP envSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Environment >::type env(envSEXP );
        Rcpp::traits::input_parameter< std::string >::type name(nameSEXP );
        bool __result = runit_remove(env, name);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_square
List runit_square(Environment e);
extern "C"  SEXP RcppTest_runit_square(SEXP eSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Environment >::type e(eSEXP );
        List __result = runit_square(e);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_child
Environment runit_child();
extern "C"  SEXP RcppTest_runit_child() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Environment __result = runit_child();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// function_
Function function_(SEXP x);
extern "C"  SEXP RcppTest_function_(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Function __result = function_(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// function_variadic
NumericVector function_variadic(Function sort, NumericVector y);
extern "C"  SEXP RcppTest_function_variadic(SEXP sortSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Function >::type sort(sortSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP );
        NumericVector __result = function_variadic(sort, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// function_env
Environment function_env(Function fun);
extern "C"  SEXP RcppTest_function_env(SEXP funSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Function >::type fun(funSEXP );
        Environment __result = function_env(fun);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// function_namespace_env
Function function_namespace_env();
extern "C"  SEXP RcppTest_function_namespace_env() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Function __result = function_namespace_env();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_language
Language runit_language(SEXP x);
extern "C"  SEXP RcppTest_runit_language(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Language __result = runit_language(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_lang_variadic_1
Language runit_lang_variadic_1();
extern "C"  SEXP RcppTest_runit_lang_variadic_1() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Language __result = runit_lang_variadic_1();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_lang_variadic_2
Language runit_lang_variadic_2();
extern "C"  SEXP RcppTest_runit_lang_variadic_2() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Language __result = runit_lang_variadic_2();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_lang_push_back
Language runit_lang_push_back();
extern "C"  SEXP RcppTest_runit_lang_push_back() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Language __result = runit_lang_push_back();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_lang_square_rv
double runit_lang_square_rv();
extern "C"  SEXP RcppTest_runit_lang_square_rv() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        double __result = runit_lang_square_rv();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_lang_square_lv
Language runit_lang_square_lv();
extern "C"  SEXP RcppTest_runit_lang_square_lv() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Language __result = runit_lang_square_lv();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_lang_fun
SEXP runit_lang_fun(Function fun, IntegerVector x);
extern "C"  SEXP RcppTest_runit_lang_fun(SEXP funSEXP, SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Function >::type fun(funSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP );
        SEXP __result = runit_lang_fun(fun, x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_lang_inenv
SEXP runit_lang_inenv(Environment env);
extern "C"  SEXP RcppTest_runit_lang_inenv(SEXP envSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Environment >::type env(envSEXP );
        SEXP __result = runit_lang_inenv(env);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pairlist
Pairlist runit_pairlist(SEXP x);
extern "C"  SEXP RcppTest_runit_pairlist(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Pairlist __result = runit_pairlist(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pl_variadic_1
Pairlist runit_pl_variadic_1();
extern "C"  SEXP RcppTest_runit_pl_variadic_1() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Pairlist __result = runit_pl_variadic_1();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pl_variadic_2
Pairlist runit_pl_variadic_2();
extern "C"  SEXP RcppTest_runit_pl_variadic_2() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Pairlist __result = runit_pl_variadic_2();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pl_push_front
Pairlist runit_pl_push_front();
extern "C"  SEXP RcppTest_runit_pl_push_front() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Pairlist __result = runit_pl_push_front();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pl_push_back
Pairlist runit_pl_push_back();
extern "C"  SEXP RcppTest_runit_pl_push_back() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Pairlist __result = runit_pl_push_back();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pl_insert
Pairlist runit_pl_insert();
extern "C"  SEXP RcppTest_runit_pl_insert() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Pairlist __result = runit_pl_insert();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pl_replace
Pairlist runit_pl_replace();
extern "C"  SEXP RcppTest_runit_pl_replace() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Pairlist __result = runit_pl_replace();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pl_size
int runit_pl_size();
extern "C"  SEXP RcppTest_runit_pl_size() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        int __result = runit_pl_size();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pl_remove_1
Pairlist runit_pl_remove_1();
extern "C"  SEXP RcppTest_runit_pl_remove_1() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Pairlist __result = runit_pl_remove_1();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pl_remove_2
Pairlist runit_pl_remove_2();
extern "C"  SEXP RcppTest_runit_pl_remove_2() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Pairlist __result = runit_pl_remove_2();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pl_remove_3
Pairlist runit_pl_remove_3();
extern "C"  SEXP RcppTest_runit_pl_remove_3() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Pairlist __result = runit_pl_remove_3();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pl_square_1
double runit_pl_square_1();
extern "C"  SEXP RcppTest_runit_pl_square_1() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        double __result = runit_pl_square_1();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pl_square_2
Pairlist runit_pl_square_2();
extern "C"  SEXP RcppTest_runit_pl_square_2() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Pairlist __result = runit_pl_square_2();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_formula_
Formula runit_formula_();
extern "C"  SEXP RcppTest_runit_formula_() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Formula __result = runit_formula_();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_formula_SEXP
Formula runit_formula_SEXP(SEXP form);
extern "C"  SEXP RcppTest_runit_formula_SEXP(SEXP formSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type form(formSEXP );
        Formula __result = runit_formula_SEXP(form);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// matrix_numeric
double matrix_numeric(NumericMatrix m);
extern "C"  SEXP RcppTest_matrix_numeric(SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP );
        double __result = matrix_numeric(m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// matrix_character
std::string matrix_character(CharacterMatrix m);
extern "C"  SEXP RcppTest_matrix_character(SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterMatrix >::type m(mSEXP );
        std::string __result = matrix_character(m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// matrix_generic
List matrix_generic(GenericMatrix m);
extern "C"  SEXP RcppTest_matrix_generic(SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< GenericMatrix >::type m(mSEXP );
        List __result = matrix_generic(m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// matrix_numeric_ctor2
NumericMatrix matrix_numeric_ctor2();
extern "C"  SEXP RcppTest_matrix_numeric_ctor2() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericMatrix __result = matrix_numeric_ctor2();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integer_matrix_indexing
int integer_matrix_indexing(IntegerMatrix m);
extern "C"  SEXP RcppTest_integer_matrix_indexing(SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerMatrix >::type m(mSEXP );
        int __result = integer_matrix_indexing(m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integer_matrix_indexing_lhs
IntegerMatrix integer_matrix_indexing_lhs(IntegerMatrix m);
extern "C"  SEXP RcppTest_integer_matrix_indexing_lhs(SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerMatrix >::type m(mSEXP );
        IntegerMatrix __result = integer_matrix_indexing_lhs(m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_NumericMatrix_row
double runit_NumericMatrix_row(NumericMatrix m);
extern "C"  SEXP RcppTest_runit_NumericMatrix_row(SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP );
        double __result = runit_NumericMatrix_row(m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_CharacterMatrix_row
std::string runit_CharacterMatrix_row(CharacterMatrix m);
extern "C"  SEXP RcppTest_runit_CharacterMatrix_row(SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterMatrix >::type m(mSEXP );
        std::string __result = runit_CharacterMatrix_row(m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_NumericMatrix_column
double runit_NumericMatrix_column(NumericMatrix m);
extern "C"  SEXP RcppTest_runit_NumericMatrix_column(SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP );
        double __result = runit_NumericMatrix_column(m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_NumericMatrix_cumsum
NumericMatrix runit_NumericMatrix_cumsum(NumericMatrix input);
extern "C"  SEXP RcppTest_runit_NumericMatrix_cumsum(SEXP inputSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type input(inputSEXP );
        NumericMatrix __result = runit_NumericMatrix_cumsum(input);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_CharacterMatrix_column
std::string runit_CharacterMatrix_column(CharacterMatrix m);
extern "C"  SEXP RcppTest_runit_CharacterMatrix_column(SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterMatrix >::type m(mSEXP );
        std::string __result = runit_CharacterMatrix_column(m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_Row_Column_sugar
List runit_Row_Column_sugar(NumericMatrix x);
extern "C"  SEXP RcppTest_runit_Row_Column_sugar(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        List __result = runit_Row_Column_sugar(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_NumericMatrix_colsum
NumericMatrix runit_NumericMatrix_colsum(NumericMatrix input);
extern "C"  SEXP RcppTest_runit_NumericMatrix_colsum(SEXP inputSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type input(inputSEXP );
        NumericMatrix __result = runit_NumericMatrix_colsum(input);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_NumericMatrix_rowsum
NumericMatrix runit_NumericMatrix_rowsum(NumericMatrix input);
extern "C"  SEXP RcppTest_runit_NumericMatrix_rowsum(SEXP inputSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type input(inputSEXP );
        NumericMatrix __result = runit_NumericMatrix_rowsum(input);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// character_matrix_indexing
CharacterVector character_matrix_indexing(CharacterMatrix m);
extern "C"  SEXP RcppTest_character_matrix_indexing(SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterMatrix >::type m(mSEXP );
        CharacterVector __result = character_matrix_indexing(m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// character_matrix_indexing_lhs
CharacterMatrix character_matrix_indexing_lhs(CharacterMatrix m);
extern "C"  SEXP RcppTest_character_matrix_indexing_lhs(SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterMatrix >::type m(mSEXP );
        CharacterMatrix __result = character_matrix_indexing_lhs(m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// character_matrix_row_iteration_incr
CharacterVector character_matrix_row_iteration_incr(CharacterMatrix m);
extern "C"  SEXP RcppTest_character_matrix_row_iteration_incr(SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterMatrix >::type m(mSEXP );
        CharacterVector __result = character_matrix_row_iteration_incr(m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// character_matrix_row_iteration_decr
CharacterVector character_matrix_row_iteration_decr(CharacterMatrix m);
extern "C"  SEXP RcppTest_character_matrix_row_iteration_decr(SEXP mSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterMatrix >::type m(mSEXP );
        CharacterVector __result = character_matrix_row_iteration_decr(m);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// symbol_
SEXP symbol_();
extern "C"  SEXP RcppTest_symbol_() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP __result = symbol_();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// symbol_ctor
Symbol symbol_ctor(SEXP x);
extern "C"  SEXP RcppTest_symbol_ctor(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Symbol __result = symbol_ctor(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Argument_
List Argument_();
extern "C"  SEXP RcppTest_Argument_() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = Argument_();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// evaluator_error
SEXP evaluator_error();
extern "C"  SEXP RcppTest_evaluator_error() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP __result = evaluator_error();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// evaluator_ok
SEXP evaluator_ok(SEXP x);
extern "C"  SEXP RcppTest_evaluator_ok(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        SEXP __result = evaluator_ok(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// exceptions_
void exceptions_();
extern "C"  SEXP RcppTest_exceptions_() {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        exceptions_();
    }
    return R_NilValue;
END_RCPP
}
// has_iterator_
LogicalVector has_iterator_();
extern "C"  SEXP RcppTest_has_iterator_() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        LogicalVector __result = has_iterator_();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// na_proxy
LogicalVector na_proxy();
extern "C"  SEXP RcppTest_na_proxy() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        LogicalVector __result = na_proxy();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stretchy_list
StretchyList stretchy_list();
extern "C"  SEXP RcppTest_stretchy_list() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        StretchyList __result = stretchy_list();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// named_stretchy_list
StretchyList named_stretchy_list();
extern "C"  SEXP RcppTest_named_stretchy_list() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        StretchyList __result = named_stretchy_list();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_Reference_getId
std::string runit_Reference_getId(Reference obj);
extern "C"  SEXP RcppTest_runit_Reference_getId(SEXP objSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Reference >::type obj(objSEXP );
        std::string __result = runit_Reference_getId(obj);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// plus_REALSXP
List plus_REALSXP();
extern "C"  SEXP RcppTest_plus_REALSXP() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = plus_REALSXP();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// times_REALSXP
List times_REALSXP();
extern "C"  SEXP RcppTest_times_REALSXP() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = times_REALSXP();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// divides_REALSXP
List divides_REALSXP();
extern "C"  SEXP RcppTest_divides_REALSXP() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = divides_REALSXP();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// minus_REALSXP
List minus_REALSXP();
extern "C"  SEXP RcppTest_minus_REALSXP() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = minus_REALSXP();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// functions_REALSXP
List functions_REALSXP();
extern "C"  SEXP RcppTest_functions_REALSXP() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = functions_REALSXP();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// S4_methods
List S4_methods(RObject y);
extern "C"  SEXP RcppTest_S4_methods(SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< RObject >::type y(ySEXP );
        List __result = S4_methods(y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// S4_getslots
void S4_getslots(S4 y);
extern "C"  SEXP RcppTest_S4_getslots(SEXP ySEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< S4 >::type y(ySEXP );
        S4_getslots(y);
    }
    return R_NilValue;
END_RCPP
}
// S4_setslots
void S4_setslots(S4 y);
extern "C"  SEXP RcppTest_S4_setslots(SEXP ySEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< S4 >::type y(ySEXP );
        S4_setslots(y);
    }
    return R_NilValue;
END_RCPP
}
// S4_setslots_2
void S4_setslots_2(S4 y);
extern "C"  SEXP RcppTest_S4_setslots_2(SEXP ySEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< S4 >::type y(ySEXP );
        S4_setslots_2(y);
    }
    return R_NilValue;
END_RCPP
}
// S4_ctor
S4 S4_ctor(std::string cl);
extern "C"  SEXP RcppTest_S4_ctor(SEXP clSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type cl(clSEXP );
        S4 __result = S4_ctor(cl);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// S4_is_track
bool S4_is_track(S4 tr);
extern "C"  SEXP RcppTest_S4_is_track(SEXP trSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< S4 >::type tr(trSEXP );
        bool __result = S4_is_track(tr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// S4_is_trackCurve
bool S4_is_trackCurve(S4 tr);
extern "C"  SEXP RcppTest_S4_is_trackCurve(SEXP trSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< S4 >::type tr(trSEXP );
        bool __result = S4_is_trackCurve(tr);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// S4_get_slot_x
NumericVector S4_get_slot_x(S4 o);
extern "C"  SEXP RcppTest_S4_get_slot_x(SEXP oSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< S4 >::type o(oSEXP );
        NumericVector __result = S4_get_slot_x(o);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// S4_get_attr_x
CharacterVector S4_get_attr_x(IntegerVector o);
extern "C"  SEXP RcppTest_S4_get_attr_x(SEXP oSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type o(oSEXP );
        CharacterVector __result = S4_get_attr_x(o);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// S4_dotdata
S4 S4_dotdata(S4 foo);
extern "C"  SEXP RcppTest_S4_dotdata(SEXP fooSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< S4 >::type foo(fooSEXP );
        S4 __result = S4_dotdata(foo);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// countArgs
int countArgs(Dots dots);
extern "C"  SEXP RcppTest_countArgs(SEXP dotsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Dots >::type dots(dotsSEXP );
        int __result = countArgs(dots);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// countNamedArgs
List countNamedArgs(NamedDots dots);
extern "C"  SEXP RcppTest_countNamedArgs(SEXP dotsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NamedDots >::type dots(dotsSEXP );
        List __result = countNamedArgs(dots);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Rcpp_IsNA
bool Rcpp_IsNA(double x);
extern "C"  SEXP RcppTest_Rcpp_IsNA(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        bool __result = Rcpp_IsNA(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Rcpp_IsNaN
bool Rcpp_IsNaN(double x);
extern "C"  SEXP RcppTest_Rcpp_IsNaN(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        bool __result = Rcpp_IsNaN(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dnorm
NumericVector runit_dnorm(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_dnorm(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_dnorm(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pnorm
NumericVector runit_pnorm(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_pnorm(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_pnorm(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qnorm
NumericVector runit_qnorm(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_qnorm(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_qnorm(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dunif
NumericVector runit_dunif(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_dunif(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_dunif(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_punif
NumericVector runit_punif(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_punif(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_punif(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qunif
NumericVector runit_qunif(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_qunif(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_qunif(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dgamma
NumericVector runit_dgamma(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_dgamma(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_dgamma(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pgamma
NumericVector runit_pgamma(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_pgamma(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_pgamma(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qgamma
NumericVector runit_qgamma(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_qgamma(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_qgamma(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dbeta
NumericVector runit_dbeta(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_dbeta(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_dbeta(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pbeta
NumericVector runit_pbeta(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_pbeta(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_pbeta(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qbeta
NumericVector runit_qbeta(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_qbeta(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_qbeta(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dlnorm
NumericVector runit_dlnorm(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_dlnorm(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_dlnorm(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_plnorm
NumericVector runit_plnorm(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_plnorm(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_plnorm(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qlnorm
NumericVector runit_qlnorm(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_qlnorm(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_qlnorm(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dchisq
NumericVector runit_dchisq(double x, double a);
extern "C"  SEXP RcppTest_runit_dchisq(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_dchisq(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pchisq
NumericVector runit_pchisq(double x, double a);
extern "C"  SEXP RcppTest_runit_pchisq(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_pchisq(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qchisq
NumericVector runit_qchisq(double x, double a);
extern "C"  SEXP RcppTest_runit_qchisq(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_qchisq(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dnchisq
NumericVector runit_dnchisq(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_dnchisq(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_dnchisq(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pnchisq
NumericVector runit_pnchisq(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_pnchisq(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_pnchisq(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qnchisq
NumericVector runit_qnchisq(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_qnchisq(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_qnchisq(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_df
NumericVector runit_df(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_df(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_df(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pf
NumericVector runit_pf(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_pf(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_pf(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qf
NumericVector runit_qf(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_qf(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_qf(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dt
NumericVector runit_dt(double x, double a);
extern "C"  SEXP RcppTest_runit_dt(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_dt(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pt
NumericVector runit_pt(double x, double a);
extern "C"  SEXP RcppTest_runit_pt(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_pt(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qt
NumericVector runit_qt(double x, double a);
extern "C"  SEXP RcppTest_runit_qt(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_qt(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dbinom
NumericVector runit_dbinom(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_dbinom(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_dbinom(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pbinom
NumericVector runit_pbinom(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_pbinom(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_pbinom(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qbinom
NumericVector runit_qbinom(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_qbinom(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_qbinom(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dcauchy
NumericVector runit_dcauchy(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_dcauchy(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_dcauchy(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pcauchy
NumericVector runit_pcauchy(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_pcauchy(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_pcauchy(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qcauchy
NumericVector runit_qcauchy(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_qcauchy(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_qcauchy(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dexp
NumericVector runit_dexp(double x, double a);
extern "C"  SEXP RcppTest_runit_dexp(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_dexp(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pexp
NumericVector runit_pexp(double x, double a);
extern "C"  SEXP RcppTest_runit_pexp(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_pexp(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qexp
NumericVector runit_qexp(double x, double a);
extern "C"  SEXP RcppTest_runit_qexp(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_qexp(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dgeom
NumericVector runit_dgeom(double x, double a);
extern "C"  SEXP RcppTest_runit_dgeom(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_dgeom(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pgeom
NumericVector runit_pgeom(double x, double a);
extern "C"  SEXP RcppTest_runit_pgeom(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_pgeom(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qgeom
NumericVector runit_qgeom(double x, double a);
extern "C"  SEXP RcppTest_runit_qgeom(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_qgeom(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dhyper
NumericVector runit_dhyper(double x, double a, double b, double c);
extern "C"  SEXP RcppTest_runit_dhyper(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type c(cSEXP );
        NumericVector __result = runit_dhyper(x, a, b, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_phyper
NumericVector runit_phyper(double x, double a, double b, double c);
extern "C"  SEXP RcppTest_runit_phyper(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type c(cSEXP );
        NumericVector __result = runit_phyper(x, a, b, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qhyper
NumericVector runit_qhyper(double x, double a, double b, double c);
extern "C"  SEXP RcppTest_runit_qhyper(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type c(cSEXP );
        NumericVector __result = runit_qhyper(x, a, b, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dnbinom
NumericVector runit_dnbinom(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_dnbinom(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_dnbinom(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pnbinom
NumericVector runit_pnbinom(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_pnbinom(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_pnbinom(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qnbinom
NumericVector runit_qnbinom(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_qnbinom(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_qnbinom(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dpois
NumericVector runit_dpois(double x, double a);
extern "C"  SEXP RcppTest_runit_dpois(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_dpois(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_ppois
NumericVector runit_ppois(double x, double a);
extern "C"  SEXP RcppTest_runit_ppois(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_ppois(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qpois
NumericVector runit_qpois(double x, double a);
extern "C"  SEXP RcppTest_runit_qpois(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        NumericVector __result = runit_qpois(x, a);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dweibull
NumericVector runit_dweibull(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_dweibull(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_dweibull(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pweibull
NumericVector runit_pweibull(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_pweibull(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_pweibull(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qweibull
NumericVector runit_qweibull(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_qweibull(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_qweibull(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dlogis
NumericVector runit_dlogis(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_dlogis(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_dlogis(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_plogis
NumericVector runit_plogis(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_plogis(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_plogis(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qlogis
NumericVector runit_qlogis(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_qlogis(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_qlogis(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dnbeta
NumericVector runit_dnbeta(double x, double a, double b, double c);
extern "C"  SEXP RcppTest_runit_dnbeta(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type c(cSEXP );
        NumericVector __result = runit_dnbeta(x, a, b, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pnbeta
NumericVector runit_pnbeta(double x, double a, double b, double c);
extern "C"  SEXP RcppTest_runit_pnbeta(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type c(cSEXP );
        NumericVector __result = runit_pnbeta(x, a, b, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qnbeta
NumericVector runit_qnbeta(double x, double a, double b, double c);
extern "C"  SEXP RcppTest_runit_qnbeta(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type c(cSEXP );
        NumericVector __result = runit_qnbeta(x, a, b, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dnf
NumericVector runit_dnf(double x, double a, double b, double c);
extern "C"  SEXP RcppTest_runit_dnf(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type c(cSEXP );
        NumericVector __result = runit_dnf(x, a, b, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pnf
NumericVector runit_pnf(double x, double a, double b, double c);
extern "C"  SEXP RcppTest_runit_pnf(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type c(cSEXP );
        NumericVector __result = runit_pnf(x, a, b, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qnf
NumericVector runit_qnf(double x, double a, double b, double c);
extern "C"  SEXP RcppTest_runit_qnf(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        Rcpp::traits::input_parameter< double >::type c(cSEXP );
        NumericVector __result = runit_qnf(x, a, b, c);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dnt
NumericVector runit_dnt(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_dnt(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_dnt(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pnt
NumericVector runit_pnt(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_pnt(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_pnt(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qnt
NumericVector runit_qnt(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_qnt(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_qnt(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dwilcox
NumericVector runit_dwilcox(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_dwilcox(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_dwilcox(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pwilcox
NumericVector runit_pwilcox(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_pwilcox(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_pwilcox(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qwilcox
NumericVector runit_qwilcox(double x, double a, double b);
extern "C"  SEXP RcppTest_runit_qwilcox(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_qwilcox(x, a, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dbeta_2
List runit_dbeta_2(NumericVector xx, double aa, double bb);
extern "C"  SEXP RcppTest_runit_dbeta_2(SEXP xxSEXP, SEXP aaSEXP, SEXP bbSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< double >::type aa(aaSEXP );
        Rcpp::traits::input_parameter< double >::type bb(bbSEXP );
        List __result = runit_dbeta_2(xx, aa, bb);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dbinom_2
List runit_dbinom_2(IntegerVector xx);
extern "C"  SEXP RcppTest_runit_dbinom_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type xx(xxSEXP );
        List __result = runit_dbinom_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dunif_2
List runit_dunif_2(NumericVector xx);
extern "C"  SEXP RcppTest_runit_dunif_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_dunif_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dgamma_2
List runit_dgamma_2(NumericVector xx);
extern "C"  SEXP RcppTest_runit_dgamma_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_dgamma_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dpois_2
List runit_dpois_2(IntegerVector xx);
extern "C"  SEXP RcppTest_runit_dpois_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type xx(xxSEXP );
        List __result = runit_dpois_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dnorm_2
List runit_dnorm_2(NumericVector xx);
extern "C"  SEXP RcppTest_runit_dnorm_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_dnorm_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_dt_2
List runit_dt_2(NumericVector xx);
extern "C"  SEXP RcppTest_runit_dt_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_dt_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pbeta_2
List runit_pbeta_2(NumericVector xx, double aa, double bb);
extern "C"  SEXP RcppTest_runit_pbeta_2(SEXP xxSEXP, SEXP aaSEXP, SEXP bbSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< double >::type aa(aaSEXP );
        Rcpp::traits::input_parameter< double >::type bb(bbSEXP );
        List __result = runit_pbeta_2(xx, aa, bb);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pbinom_2
List runit_pbinom_2(NumericVector xx, int n, double p);
extern "C"  SEXP RcppTest_runit_pbinom_2(SEXP xxSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< double >::type p(pSEXP );
        List __result = runit_pbinom_2(xx, n, p);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pcauchy_2
List runit_pcauchy_2(NumericVector xx, double loc, double scl);
extern "C"  SEXP RcppTest_runit_pcauchy_2(SEXP xxSEXP, SEXP locSEXP, SEXP sclSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< double >::type loc(locSEXP );
        Rcpp::traits::input_parameter< double >::type scl(sclSEXP );
        List __result = runit_pcauchy_2(xx, loc, scl);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_punif_2
List runit_punif_2(NumericVector xx);
extern "C"  SEXP RcppTest_runit_punif_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_punif_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pgamma_2
List runit_pgamma_2(NumericVector xx);
extern "C"  SEXP RcppTest_runit_pgamma_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_pgamma_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pnf_2
List runit_pnf_2(NumericVector xx);
extern "C"  SEXP RcppTest_runit_pnf_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_pnf_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pf_2
List runit_pf_2(NumericVector xx);
extern "C"  SEXP RcppTest_runit_pf_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_pf_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pnchisq_2
List runit_pnchisq_2(NumericVector xx);
extern "C"  SEXP RcppTest_runit_pnchisq_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_pnchisq_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pchisq_2
List runit_pchisq_2(NumericVector xx);
extern "C"  SEXP RcppTest_runit_pchisq_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_pchisq_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pnorm_2
List runit_pnorm_2(NumericVector xx);
extern "C"  SEXP RcppTest_runit_pnorm_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_pnorm_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_ppois_2
List runit_ppois_2(NumericVector xx);
extern "C"  SEXP RcppTest_runit_ppois_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_ppois_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pt_2
List runit_pt_2(NumericVector xx);
extern "C"  SEXP RcppTest_runit_pt_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_pt_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pnt_2
List runit_pnt_2(NumericVector xx);
extern "C"  SEXP RcppTest_runit_pnt_2(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_pnt_2(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qbinom_prob
List runit_qbinom_prob(NumericVector xx, int n, double p);
extern "C"  SEXP RcppTest_runit_qbinom_prob(SEXP xxSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< double >::type p(pSEXP );
        List __result = runit_qbinom_prob(xx, n, p);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qunif_prob
List runit_qunif_prob(NumericVector xx);
extern "C"  SEXP RcppTest_runit_qunif_prob(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_qunif_prob(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qnorm_prob
List runit_qnorm_prob(NumericVector xx);
extern "C"  SEXP RcppTest_runit_qnorm_prob(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_qnorm_prob(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qnorm_log
List runit_qnorm_log(NumericVector xx);
extern "C"  SEXP RcppTest_runit_qnorm_log(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_qnorm_log(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qpois_prob
List runit_qpois_prob(NumericVector xx);
extern "C"  SEXP RcppTest_runit_qpois_prob(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_qpois_prob(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_qt_2
NumericVector runit_qt_2(NumericVector xx, double d, bool lt, bool lg);
extern "C"  SEXP RcppTest_runit_qt_2(SEXP xxSEXP, SEXP dSEXP, SEXP ltSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< double >::type d(dSEXP );
        Rcpp::traits::input_parameter< bool >::type lt(ltSEXP );
        Rcpp::traits::input_parameter< bool >::type lg(lgSEXP );
        NumericVector __result = runit_qt_2(xx, d, lt, lg);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// asDouble
double asDouble(double d);
extern "C"  SEXP RcppTest_asDouble(SEXP dSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type d(dSEXP );
        double __result = asDouble(d);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// asInt
int asInt(int i);
extern "C"  SEXP RcppTest_asInt(SEXP iSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type i(iSEXP );
        int __result = asInt(i);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// asStdString
std::string asStdString(std::string s);
extern "C"  SEXP RcppTest_asStdString(SEXP sSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::string >::type s(sSEXP );
        std::string __result = asStdString(s);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// asRaw
Rbyte asRaw(Rbyte i);
extern "C"  SEXP RcppTest_asRaw(SEXP iSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rbyte >::type i(iSEXP );
        Rbyte __result = asRaw(i);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// asLogical
bool asLogical(bool b);
extern "C"  SEXP RcppTest_asLogical(SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< bool >::type b(bSEXP );
        bool __result = asLogical(b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// asStdVectorInt
std::vector<int> asStdVectorInt(SEXP x);
extern "C"  SEXP RcppTest_asStdVectorInt(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        std::vector<int> __result = asStdVectorInt(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// asStdVectorDouble
std::vector<double> asStdVectorDouble(SEXP x);
extern "C"  SEXP RcppTest_asStdVectorDouble(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        std::vector<double> __result = asStdVectorDouble(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// asStdVectorRaw
std::vector<Rbyte> asStdVectorRaw(SEXP x);
extern "C"  SEXP RcppTest_asStdVectorRaw(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        std::vector<Rbyte> __result = asStdVectorRaw(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// asStdVectorBool
std::vector<bool> asStdVectorBool(SEXP x);
extern "C"  SEXP RcppTest_asStdVectorBool(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        std::vector<bool> __result = asStdVectorBool(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// asStdVectorString
std::vector<std::string> asStdVectorString(SEXP x);
extern "C"  SEXP RcppTest_asStdVectorString(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        std::vector<std::string> __result = asStdVectorString(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stdsetint
std::set<int> stdsetint();
extern "C"  SEXP RcppTest_stdsetint() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        std::set<int> __result = stdsetint();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stdsetdouble
std::set<double> stdsetdouble();
extern "C"  SEXP RcppTest_stdsetdouble() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        std::set<double> __result = stdsetdouble();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stdsetraw
std::set<Rbyte> stdsetraw();
extern "C"  SEXP RcppTest_stdsetraw() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        std::set<Rbyte> __result = stdsetraw();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stdsetstring
std::set<std::string> stdsetstring();
extern "C"  SEXP RcppTest_stdsetstring() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        std::set<std::string> __result = stdsetstring();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// hasAttribute
bool hasAttribute(DataFrame x);
extern "C"  SEXP RcppTest_hasAttribute(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP );
        bool __result = hasAttribute(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// attr_
SEXP attr_(DataFrame x);
extern "C"  SEXP RcppTest_attr_(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP );
        SEXP __result = attr_(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// attr_set
RObject attr_set();
extern "C"  SEXP RcppTest_attr_set() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        RObject __result = attr_set();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// isNULL
bool isNULL(RObject x);
extern "C"  SEXP RcppTest_isNULL(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< RObject >::type x(xSEXP );
        bool __result = isNULL(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// inherits_
bool inherits_(RObject xx);
extern "C"  SEXP RcppTest_inherits_(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< RObject >::type xx(xxSEXP );
        bool __result = inherits_(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// String_replace_all
String String_replace_all(String z, String x, String y);
extern "C"  SEXP RcppTest_String_replace_all(SEXP zSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< String >::type z(zSEXP );
        Rcpp::traits::input_parameter< String >::type x(xSEXP );
        Rcpp::traits::input_parameter< String >::type y(ySEXP );
        String __result = String_replace_all(z, x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// String_replace_first
String String_replace_first(String z, String x, String y);
extern "C"  SEXP RcppTest_String_replace_first(SEXP zSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< String >::type z(zSEXP );
        Rcpp::traits::input_parameter< String >::type x(xSEXP );
        Rcpp::traits::input_parameter< String >::type y(ySEXP );
        String __result = String_replace_first(z, x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// String_replace_last
String String_replace_last(String z, String x, String y);
extern "C"  SEXP RcppTest_String_replace_last(SEXP zSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< String >::type z(zSEXP );
        Rcpp::traits::input_parameter< String >::type x(xSEXP );
        Rcpp::traits::input_parameter< String >::type y(ySEXP );
        String __result = String_replace_last(z, x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_sapply_string
CharacterVector test_sapply_string(CharacterVector text, CharacterVector old, CharacterVector new_);
extern "C"  SEXP RcppTest_test_sapply_string(SEXP textSEXP, SEXP oldSEXP, SEXP new_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type text(textSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type old(oldSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type new_(new_SEXP );
        CharacterVector __result = test_sapply_string(text, old, new_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// test_compare_Strings
List test_compare_Strings(String aa, String bb);
extern "C"  SEXP RcppTest_test_compare_Strings(SEXP aaSEXP, SEXP bbSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< String >::type aa(aaSEXP );
        Rcpp::traits::input_parameter< String >::type bb(bbSEXP );
        List __result = test_compare_Strings(aa, bb);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CharacterVector_wstring
CharacterVector CharacterVector_wstring();
extern "C"  SEXP RcppTest_CharacterVector_wstring() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        CharacterVector __result = CharacterVector_wstring();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// wstring_return
std::wstring wstring_return();
extern "C"  SEXP RcppTest_wstring_return() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        std::wstring __result = wstring_return();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// wstring_param
String wstring_param(std::wstring s1, std::wstring s2);
extern "C"  SEXP RcppTest_wstring_param(SEXP s1SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::wstring >::type s1(s1SEXP );
        Rcpp::traits::input_parameter< std::wstring >::type s2(s2SEXP );
        String __result = wstring_param(s1, s2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// wrap_vector_wstring
std::vector<std::wstring> wrap_vector_wstring();
extern "C"  SEXP RcppTest_wrap_vector_wstring() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        std::vector<std::wstring> __result = wrap_vector_wstring();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// as_vector_wstring
std::vector<std::wstring> as_vector_wstring(std::vector<std::wstring> x);
extern "C"  SEXP RcppTest_as_vector_wstring(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<std::wstring> >::type x(xSEXP );
        std::vector<std::wstring> __result = as_vector_wstring(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_abs
List runit_abs(NumericVector xx, IntegerVector yy);
extern "C"  SEXP RcppTest_runit_abs(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type yy(yySEXP );
        List __result = runit_abs(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_constructor
LogicalVector runit_constructor(NumericVector xx, NumericVector yy);
extern "C"  SEXP RcppTest_runit_constructor(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type yy(yySEXP );
        LogicalVector __result = runit_constructor(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_assignment
LogicalVector runit_assignment(NumericVector xx, NumericVector yy);
extern "C"  SEXP RcppTest_runit_assignment(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type yy(yySEXP );
        LogicalVector __result = runit_assignment(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_diff
NumericVector runit_diff(NumericVector xx);
extern "C"  SEXP RcppTest_runit_diff(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        NumericVector __result = runit_diff(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_diff_int
IntegerVector runit_diff_int(IntegerVector xx);
extern "C"  SEXP RcppTest_runit_diff_int(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type xx(xxSEXP );
        IntegerVector __result = runit_diff_int(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_diff_ifelse
NumericVector runit_diff_ifelse(LogicalVector pred, NumericVector xx, NumericVector yy);
extern "C"  SEXP RcppTest_runit_diff_ifelse(SEXP predSEXP, SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< LogicalVector >::type pred(predSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type yy(yySEXP );
        NumericVector __result = runit_diff_ifelse(pred, xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_exp
List runit_exp(NumericVector xx, IntegerVector yy);
extern "C"  SEXP RcppTest_runit_exp(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type yy(yySEXP );
        List __result = runit_exp(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_floor
List runit_floor(NumericVector xx, IntegerVector yy);
extern "C"  SEXP RcppTest_runit_floor(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type yy(yySEXP );
        List __result = runit_floor(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_ceil
List runit_ceil(NumericVector xx, IntegerVector yy);
extern "C"  SEXP RcppTest_runit_ceil(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type yy(yySEXP );
        List __result = runit_ceil(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pow
List runit_pow(NumericVector xx, IntegerVector yy);
extern "C"  SEXP RcppTest_runit_pow(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type yy(yySEXP );
        List __result = runit_pow(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_ifelse
List runit_ifelse(NumericVector xx, NumericVector yy);
extern "C"  SEXP RcppTest_runit_ifelse(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type yy(yySEXP );
        List __result = runit_ifelse(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_isna
LogicalVector runit_isna(NumericVector xx);
extern "C"  SEXP RcppTest_runit_isna(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        LogicalVector __result = runit_isna(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_isfinite
LogicalVector runit_isfinite(NumericVector xx);
extern "C"  SEXP RcppTest_runit_isfinite(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        LogicalVector __result = runit_isfinite(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_isinfinite
LogicalVector runit_isinfinite(NumericVector xx);
extern "C"  SEXP RcppTest_runit_isinfinite(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        LogicalVector __result = runit_isinfinite(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_isnan
LogicalVector runit_isnan(NumericVector xx);
extern "C"  SEXP RcppTest_runit_isnan(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        LogicalVector __result = runit_isnan(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_lapply
List runit_lapply(IntegerVector xx);
extern "C"  SEXP RcppTest_runit_lapply(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type xx(xxSEXP );
        List __result = runit_lapply(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_minus
List runit_minus(IntegerVector xx);
extern "C"  SEXP RcppTest_runit_minus(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type xx(xxSEXP );
        List __result = runit_minus(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_plus
List runit_plus(IntegerVector xx);
extern "C"  SEXP RcppTest_runit_plus(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type xx(xxSEXP );
        List __result = runit_plus(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_plus_seqlen
List runit_plus_seqlen();
extern "C"  SEXP RcppTest_runit_plus_seqlen() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = runit_plus_seqlen();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pmin
NumericVector runit_pmin(NumericVector xx, NumericVector yy);
extern "C"  SEXP RcppTest_runit_pmin(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type yy(yySEXP );
        NumericVector __result = runit_pmin(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pmin_one
List runit_pmin_one(NumericVector xx);
extern "C"  SEXP RcppTest_runit_pmin_one(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_pmin_one(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pmax
NumericVector runit_pmax(NumericVector xx, NumericVector yy);
extern "C"  SEXP RcppTest_runit_pmax(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type yy(yySEXP );
        NumericVector __result = runit_pmax(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_pmax_one
List runit_pmax_one(NumericVector xx);
extern "C"  SEXP RcppTest_runit_pmax_one(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_pmax_one(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_sapply
NumericVector runit_sapply(NumericVector xx);
extern "C"  SEXP RcppTest_runit_sapply(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        NumericVector __result = runit_sapply(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_sapply_rawfun
NumericVector runit_sapply_rawfun(NumericVector xx);
extern "C"  SEXP RcppTest_runit_sapply_rawfun(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        NumericVector __result = runit_sapply_rawfun(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_sapply_list
List runit_sapply_list(IntegerVector xx);
extern "C"  SEXP RcppTest_runit_sapply_list(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type xx(xxSEXP );
        List __result = runit_sapply_list(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_seqalong
IntegerVector runit_seqalong(NumericVector xx);
extern "C"  SEXP RcppTest_runit_seqalong(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        IntegerVector __result = runit_seqalong(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_seqlen
IntegerVector runit_seqlen();
extern "C"  SEXP RcppTest_runit_seqlen() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        IntegerVector __result = runit_seqlen();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_sign
List runit_sign(NumericVector xx, IntegerVector yy);
extern "C"  SEXP RcppTest_runit_sign(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type yy(yySEXP );
        List __result = runit_sign(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_times
List runit_times(IntegerVector xx);
extern "C"  SEXP RcppTest_runit_times(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type xx(xxSEXP );
        List __result = runit_times(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_divides
List runit_divides(NumericVector xx);
extern "C"  SEXP RcppTest_runit_divides(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_divides(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_unary_minus
NumericVector runit_unary_minus(NumericVector xx);
extern "C"  SEXP RcppTest_runit_unary_minus(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        NumericVector __result = runit_unary_minus(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_wrap
void runit_wrap(NumericVector xx, NumericVector yy, Environment e);
extern "C"  SEXP RcppTest_runit_wrap(SEXP xxSEXP, SEXP yySEXP, SEXP eSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type yy(yySEXP );
        Rcpp::traits::input_parameter< Environment >::type e(eSEXP );
        runit_wrap(xx, yy, e);
    }
    return R_NilValue;
END_RCPP
}
// runit_complex
List runit_complex(ComplexVector cx);
extern "C"  SEXP RcppTest_runit_complex(SEXP cxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< ComplexVector >::type cx(cxSEXP );
        List __result = runit_complex(cx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_rep
List runit_rep(IntegerVector xx);
extern "C"  SEXP RcppTest_runit_rep(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type xx(xxSEXP );
        List __result = runit_rep(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_rev
IntegerVector runit_rev(IntegerVector xx);
extern "C"  SEXP RcppTest_runit_rev(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type xx(xxSEXP );
        IntegerVector __result = runit_rev(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_outer
NumericMatrix runit_outer(NumericVector xx, NumericVector yy);
extern "C"  SEXP RcppTest_runit_outer(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type yy(yySEXP );
        NumericMatrix __result = runit_outer(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_row
List runit_row(NumericMatrix xx);
extern "C"  SEXP RcppTest_runit_row(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type xx(xxSEXP );
        List __result = runit_row(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_head
List runit_head(NumericVector xx);
extern "C"  SEXP RcppTest_runit_head(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_head(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_tail
List runit_tail(NumericVector xx);
extern "C"  SEXP RcppTest_runit_tail(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_tail(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_diag
List runit_diag(NumericVector xx, NumericMatrix mm);
extern "C"  SEXP RcppTest_runit_diag(SEXP xxSEXP, SEXP mmSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type mm(mmSEXP );
        List __result = runit_diag(xx, mm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_gamma
List runit_gamma(NumericVector xx);
extern "C"  SEXP RcppTest_runit_gamma(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_gamma(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_choose
List runit_choose(NumericVector nn, NumericVector kk);
extern "C"  SEXP RcppTest_runit_choose(SEXP nnSEXP, SEXP kkSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type nn(nnSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type kk(kkSEXP );
        List __result = runit_choose(nn, kk);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_lchoose
List runit_lchoose(NumericVector nn, NumericVector kk);
extern "C"  SEXP RcppTest_runit_lchoose(SEXP nnSEXP, SEXP kkSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type nn(nnSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type kk(kkSEXP );
        List __result = runit_lchoose(nn, kk);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_beta
List runit_beta(NumericVector nn, NumericVector kk);
extern "C"  SEXP RcppTest_runit_beta(SEXP nnSEXP, SEXP kkSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type nn(nnSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type kk(kkSEXP );
        List __result = runit_beta(nn, kk);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_psigamma
List runit_psigamma(NumericVector nn, NumericVector kk);
extern "C"  SEXP RcppTest_runit_psigamma(SEXP nnSEXP, SEXP kkSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type nn(nnSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type kk(kkSEXP );
        List __result = runit_psigamma(nn, kk);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_lbeta
List runit_lbeta(NumericVector nn, NumericVector kk);
extern "C"  SEXP RcppTest_runit_lbeta(SEXP nnSEXP, SEXP kkSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type nn(nnSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type kk(kkSEXP );
        List __result = runit_lbeta(nn, kk);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_log1p
List runit_log1p(NumericVector xx);
extern "C"  SEXP RcppTest_runit_log1p(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = runit_log1p(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_sum
double runit_sum(NumericVector xx);
extern "C"  SEXP RcppTest_runit_sum(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        double __result = runit_sum(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_sum_cplx
Rcomplex runit_sum_cplx(ComplexVector xx);
extern "C"  SEXP RcppTest_runit_sum_cplx(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< ComplexVector >::type xx(xxSEXP );
        Rcomplex __result = runit_sum_cplx(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}

// runit_cumsum
NumericVector runit_cumsum(NumericVector xx);
extern "C"  SEXP RcppTest_runit_cumsum(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        NumericVector __result = runit_cumsum(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_diff_REALSXP_NA
NumericVector runit_diff_REALSXP_NA(NumericVector x);
extern "C"  SEXP RcppTest_runit_diff_REALSXP_NA(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        NumericVector __result = runit_diff_REALSXP_NA(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_trunc
List runit_trunc(NumericVector xx, IntegerVector yy);
extern "C"  SEXP RcppTest_runit_trunc(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type yy(yySEXP );
        List __result = runit_trunc(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_round
NumericVector runit_round(NumericVector xx, int d);
extern "C"  SEXP RcppTest_runit_round(SEXP xxSEXP, SEXP dSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< int >::type d(dSEXP );
        NumericVector __result = runit_round(xx, d);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_signif
NumericVector runit_signif(NumericVector xx, int d);
extern "C"  SEXP RcppTest_runit_signif(SEXP xxSEXP, SEXP dSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< int >::type d(dSEXP );
        NumericVector __result = runit_signif(xx, d);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_table
IntegerVector runit_table(CharacterVector x);
extern "C"  SEXP RcppTest_runit_table(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP );
        IntegerVector __result = runit_table(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_duplicated
LogicalVector runit_duplicated(CharacterVector x);
extern "C"  SEXP RcppTest_runit_duplicated(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP );
        LogicalVector __result = runit_duplicated(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_union
IntegerVector runit_union(IntegerVector x, IntegerVector y);
extern "C"  SEXP RcppTest_runit_union(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP );
        IntegerVector __result = runit_union(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_setdiff
IntegerVector runit_setdiff(IntegerVector x, IntegerVector y);
extern "C"  SEXP RcppTest_runit_setdiff(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP );
        IntegerVector __result = runit_setdiff(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_intersect
IntegerVector runit_intersect(IntegerVector x, IntegerVector y);
extern "C"  SEXP RcppTest_runit_intersect(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP );
        IntegerVector __result = runit_intersect(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// runit_clamp
NumericVector runit_clamp(double a, NumericVector x, double b);
extern "C"  SEXP RcppTest_runit_clamp(SEXP aSEXP, SEXP xSEXP, SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type a(aSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type b(bSEXP );
        NumericVector __result = runit_clamp(a, x, b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// vector_scalar_ops
List vector_scalar_ops(NumericVector xx);
extern "C"  SEXP RcppTest_vector_scalar_ops(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = vector_scalar_ops(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// vector_scalar_logical
List vector_scalar_logical(NumericVector xx);
extern "C"  SEXP RcppTest_vector_scalar_logical(SEXP xxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        List __result = vector_scalar_logical(xx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// vector_vector_ops
List vector_vector_ops(NumericVector xx, NumericVector yy);
extern "C"  SEXP RcppTest_vector_vector_ops(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type yy(yySEXP );
        List __result = vector_vector_ops(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// vector_vector_logical
List vector_vector_logical(NumericVector xx, NumericVector yy);
extern "C"  SEXP RcppTest_vector_vector_logical(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type yy(yySEXP );
        List __result = vector_vector_logical(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// complex_binary_sugar
List complex_binary_sugar(ComplexVector xx, ComplexVector yy);
extern "C"  SEXP RcppTest_complex_binary_sugar(SEXP xxSEXP, SEXP yySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< ComplexVector >::type xx(xxSEXP );
        Rcpp::traits::input_parameter< ComplexVector >::type yy(yySEXP );
        List __result = complex_binary_sugar(xx, yy);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// raw_
RawVector raw_();
extern "C"  SEXP RcppTest_raw_() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        RawVector __result = raw_();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// raw_REALSXP
RawVector raw_REALSXP(RawVector x);
extern "C"  SEXP RcppTest_raw_REALSXP(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< RawVector >::type x(xSEXP );
        RawVector __result = raw_REALSXP(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// expression_
ExpressionVector expression_();
extern "C"  SEXP RcppTest_expression_() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        ExpressionVector __result = expression_();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// expression_variadic
ExpressionVector expression_variadic();
extern "C"  SEXP RcppTest_expression_variadic() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        ExpressionVector __result = expression_variadic();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// expression_parse
ExpressionVector expression_parse();
extern "C"  SEXP RcppTest_expression_parse() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        ExpressionVector __result = expression_parse();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// expression_parseerror
ExpressionVector expression_parseerror();
extern "C"  SEXP RcppTest_expression_parseerror() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        ExpressionVector __result = expression_parseerror();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// complex_
ComplexVector complex_();
extern "C"  SEXP RcppTest_complex_() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        ComplexVector __result = complex_();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// complex_CPLXSXP
ComplexVector complex_CPLXSXP(ComplexVector x);
extern "C"  SEXP RcppTest_complex_CPLXSXP(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< ComplexVector >::type x(xSEXP );
        ComplexVector __result = complex_CPLXSXP(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// complex_INTSXP
ComplexVector complex_INTSXP(SEXP vec);
extern "C"  SEXP RcppTest_complex_INTSXP(SEXP vecSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP );
        ComplexVector __result = complex_INTSXP(vec);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// complex_REALSXP
ComplexVector complex_REALSXP(SEXP vec);
extern "C"  SEXP RcppTest_complex_REALSXP(SEXP vecSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP );
        ComplexVector __result = complex_REALSXP(vec);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integer_ctor
IntegerVector integer_ctor();
extern "C"  SEXP RcppTest_integer_ctor() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        IntegerVector __result = integer_ctor();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integer_INTSXP
IntegerVector integer_INTSXP(SEXP vec);
extern "C"  SEXP RcppTest_integer_INTSXP(SEXP vecSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP );
        IntegerVector __result = integer_INTSXP(vec);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integer_names_set
IntegerVector integer_names_set();
extern "C"  SEXP RcppTest_integer_names_set() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        IntegerVector __result = integer_names_set();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integer_names_get
CharacterVector integer_names_get(IntegerVector y);
extern "C"  SEXP RcppTest_integer_names_get(SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP );
        CharacterVector __result = integer_names_get(y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integer_names_indexing
int integer_names_indexing(IntegerVector y);
extern "C"  SEXP RcppTest_integer_names_indexing(SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP );
        int __result = integer_names_indexing(y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integer_zero
IntegerVector integer_zero();
extern "C"  SEXP RcppTest_integer_zero() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        IntegerVector __result = integer_zero();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integer_create_zero
IntegerVector integer_create_zero();
extern "C"  SEXP RcppTest_integer_create_zero() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        IntegerVector __result = integer_create_zero();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integer_create_
List integer_create_();
extern "C"  SEXP RcppTest_integer_create_() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = integer_create_();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// integer_clone_
IntegerVector integer_clone_(IntegerVector vec);
extern "C"  SEXP RcppTest_integer_clone_(SEXP vecSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type vec(vecSEXP );
        IntegerVector __result = integer_clone_(vec);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// numeric_
NumericVector numeric_();
extern "C"  SEXP RcppTest_numeric_() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericVector __result = numeric_();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// numeric_REALSXP
NumericVector numeric_REALSXP(SEXP vec);
extern "C"  SEXP RcppTest_numeric_REALSXP(SEXP vecSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP );
        NumericVector __result = numeric_REALSXP(vec);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// list_ctor
List list_ctor();
extern "C"  SEXP RcppTest_list_ctor() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = list_ctor();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// list_template_
List list_template_();
extern "C"  SEXP RcppTest_list_template_() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = list_template_();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// list_VECSXP_
List list_VECSXP_(SEXP vec);
extern "C"  SEXP RcppTest_list_VECSXP_(SEXP vecSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP );
        List __result = list_VECSXP_(vec);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// list_iterator_
List list_iterator_(List input, Function fun);
extern "C"  SEXP RcppTest_list_iterator_(SEXP inputSEXP, SEXP funSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type input(inputSEXP );
        Rcpp::traits::input_parameter< Function >::type fun(funSEXP );
        List __result = list_iterator_(input, fun);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// list_name_indexing
int list_name_indexing(List df);
extern "C"  SEXP RcppTest_list_name_indexing(SEXP dfSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type df(dfSEXP );
        int __result = list_name_indexing(df);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// list_implicit_push_back
List list_implicit_push_back();
extern "C"  SEXP RcppTest_list_implicit_push_back() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = list_implicit_push_back();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// list_create_
List list_create_();
extern "C"  SEXP RcppTest_list_create_() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = list_create_();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// list_stdcomplex
List list_stdcomplex();
extern "C"  SEXP RcppTest_list_stdcomplex() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = list_stdcomplex();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// character_ctor
CharacterVector character_ctor();
extern "C"  SEXP RcppTest_character_ctor() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        CharacterVector __result = character_ctor();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// character_STRSXP_
std::string character_STRSXP_(SEXP vec);
extern "C"  SEXP RcppTest_character_STRSXP_(SEXP vecSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type vec(vecSEXP );
        std::string __result = character_STRSXP_(vec);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// character_plusequals
CharacterVector character_plusequals();
extern "C"  SEXP RcppTest_character_plusequals() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        CharacterVector __result = character_plusequals();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// character_iterator1
std::string character_iterator1(CharacterVector letters);
extern "C"  SEXP RcppTest_character_iterator1(SEXP lettersSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type letters(lettersSEXP );
        std::string __result = character_iterator1(letters);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// character_iterator2
std::string character_iterator2(CharacterVector letters);
extern "C"  SEXP RcppTest_character_iterator2(SEXP lettersSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type letters(lettersSEXP );
        std::string __result = character_iterator2(letters);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// character_reverse
CharacterVector character_reverse(CharacterVector y);
extern "C"  SEXP RcppTest_character_reverse(SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP );
        CharacterVector __result = character_reverse(y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// character_names_indexing
std::string character_names_indexing(CharacterVector y);
extern "C"  SEXP RcppTest_character_names_indexing(SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP );
        std::string __result = character_names_indexing(y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// character_find_
int character_find_(CharacterVector y);
extern "C"  SEXP RcppTest_character_find_(SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP );
        int __result = character_find_(y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// character_create_
List character_create_();
extern "C"  SEXP RcppTest_character_create_() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = character_create_();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// List_extract
List List_extract(List input);
extern "C"  SEXP RcppTest_List_extract(SEXP inputSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type input(inputSEXP );
        List __result = List_extract(input);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// factors
CharacterVector factors(CharacterVector s);
extern "C"  SEXP RcppTest_factors(SEXP sSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type s(sSEXP );
        CharacterVector __result = factors(s);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// IntegerVector_int_init
IntegerVector IntegerVector_int_init();
extern "C"  SEXP RcppTest_IntegerVector_int_init() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        IntegerVector __result = IntegerVector_int_init();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CharacterVectorEqualityOperator
List CharacterVectorEqualityOperator(CharacterVector x, CharacterVector y);
extern "C"  SEXP RcppTest_CharacterVectorEqualityOperator(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP );
        List __result = CharacterVectorEqualityOperator(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// List_rep_ctor
List List_rep_ctor(IntegerVector x);
extern "C"  SEXP RcppTest_List_rep_ctor(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP );
        List __result = List_rep_ctor(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stdVectorDouble
int stdVectorDouble(std::vector<double> x);
extern "C"  SEXP RcppTest_stdVectorDouble(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP );
        int __result = stdVectorDouble(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stdVectorDoubleConst
int stdVectorDoubleConst(const std::vector<double> x);
extern "C"  SEXP RcppTest_stdVectorDoubleConst(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const std::vector<double> >::type x(xSEXP );
        int __result = stdVectorDoubleConst(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stdVectorDoubleRef
int stdVectorDoubleRef(std::vector<double>& x);
extern "C"  SEXP RcppTest_stdVectorDoubleRef(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<double>& >::type x(xSEXP );
        int __result = stdVectorDoubleRef(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stdVectorDoubleConstRef
int stdVectorDoubleConstRef(const std::vector<double>& x);
extern "C"  SEXP RcppTest_stdVectorDoubleConstRef(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP );
        int __result = stdVectorDoubleConstRef(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stdVectorInt
int stdVectorInt(std::vector<int> x);
extern "C"  SEXP RcppTest_stdVectorInt(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<int> >::type x(xSEXP );
        int __result = stdVectorInt(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stdVectorIntConst
int stdVectorIntConst(const std::vector<int> x);
extern "C"  SEXP RcppTest_stdVectorIntConst(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const std::vector<int> >::type x(xSEXP );
        int __result = stdVectorIntConst(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stdVectorIntRef
int stdVectorIntRef(std::vector<int>& x);
extern "C"  SEXP RcppTest_stdVectorIntRef(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< std::vector<int>& >::type x(xSEXP );
        int __result = stdVectorIntRef(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// stdVectorIntConstRef
int stdVectorIntConstRef(const std::vector<int>& x);
extern "C"  SEXP RcppTest_stdVectorIntConstRef(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const std::vector<int>& >::type x(xSEXP );
        int __result = stdVectorIntConstRef(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// character_vector_const_proxy
std::string character_vector_const_proxy(const CharacterVector& str);
extern "C"  SEXP RcppTest_character_vector_const_proxy(SEXP strSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const CharacterVector& >::type str(strSEXP );
        std::string __result = character_vector_const_proxy(str);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// CharacterVector_test_const_proxy
CharacterVector CharacterVector_test_const_proxy(const CharacterVector x);
extern "C"  SEXP RcppTest_CharacterVector_test_const_proxy(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const CharacterVector >::type x(xSEXP );
        CharacterVector __result = CharacterVector_test_const_proxy(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// map_string_int
IntegerVector map_string_int();
extern "C"  SEXP RcppTest_map_string_int() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        IntegerVector __result = map_string_int();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// map_string_double
NumericVector map_string_double();
extern "C"  SEXP RcppTest_map_string_double() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericVector __result = map_string_double();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// map_string_bool
LogicalVector map_string_bool();
extern "C"  SEXP RcppTest_map_string_bool() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        LogicalVector __result = map_string_bool();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// map_string_Rbyte
RawVector map_string_Rbyte();
extern "C"  SEXP RcppTest_map_string_Rbyte() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        RawVector __result = map_string_Rbyte();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// map_string_string
CharacterVector map_string_string();
extern "C"  SEXP RcppTest_map_string_string() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        CharacterVector __result = map_string_string();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// map_string_generic
List map_string_generic();
extern "C"  SEXP RcppTest_map_string_generic() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = map_string_generic();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// multimap_string_int
IntegerVector multimap_string_int();
extern "C"  SEXP RcppTest_multimap_string_int() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        IntegerVector __result = multimap_string_int();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// multimap_string_double
NumericVector multimap_string_double();
extern "C"  SEXP RcppTest_multimap_string_double() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericVector __result = multimap_string_double();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// multimap_string_bool
LogicalVector multimap_string_bool();
extern "C"  SEXP RcppTest_multimap_string_bool() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        LogicalVector __result = multimap_string_bool();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// multimap_string_Rbyte
RawVector multimap_string_Rbyte();
extern "C"  SEXP RcppTest_multimap_string_Rbyte() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        RawVector __result = multimap_string_Rbyte();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// multimap_string_string
CharacterVector multimap_string_string();
extern "C"  SEXP RcppTest_multimap_string_string() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        CharacterVector __result = multimap_string_string();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// multimap_string_generic
List multimap_string_generic();
extern "C"  SEXP RcppTest_multimap_string_generic() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = multimap_string_generic();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// nonnull_const_char
SEXP nonnull_const_char();
extern "C"  SEXP RcppTest_nonnull_const_char() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP __result = nonnull_const_char();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// map_int_double
SEXP map_int_double();
extern "C"  SEXP RcppTest_map_int_double() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP __result = map_int_double();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// map_double_double
SEXP map_double_double();
extern "C"  SEXP RcppTest_map_double_double() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP __result = map_double_double();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// map_int_vector_double
SEXP map_int_vector_double();
extern "C"  SEXP RcppTest_map_int_vector_double() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        SEXP __result = map_int_vector_double();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// xptr_1
XPtr< std::vector<int> > xptr_1();
extern "C"  SEXP RcppTest_xptr_1() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        XPtr< std::vector<int> > __result = xptr_1();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// xptr_2
int xptr_2(XPtr< std::vector<int> > p);
extern "C"  SEXP RcppTest_xptr_2(SEXP pSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< XPtr< std::vector<int> > >::type p(pSEXP );
        int __result = xptr_2(p);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
